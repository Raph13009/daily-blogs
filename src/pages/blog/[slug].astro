---
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import Base from '../../layouts/Base.astro';
import { remark } from 'remark';
import rehypeRaw from 'rehype-raw';
import rehypeStringify from 'rehype-stringify';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeImageDesktop from '../../plugins/rehype-image-desktop.js';
import rehypeImageMobile from '../../plugins/rehype-image-mobile.js';

function findPostFile(slug) {
  const postsDirectory = './posts';
  let foundPath = null;

  function searchInDirectory(dir) {
    const files = fs.readdirSync(dir);
    for (const file of files) {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) {
        searchInDirectory(fullPath);
      } else if (path.basename(file, '.md') === slug) {
        foundPath = fullPath;
        return;
      }
    }
  }

  searchInDirectory(postsDirectory);
  return foundPath;
}

export async function getStaticPaths() {
  const postsDirectory = './posts';
  const posts = [];

  function traverseDirectory(dir) {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
      const fullPath = path.join(dir, file);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) {
        traverseDirectory(fullPath);
      } else if (file.endsWith('.md')) {
        const slug = path.basename(file, '.md');
        posts.push({ params: { slug } });
      }
    });
  }

  traverseDirectory(postsDirectory);
  return posts;
}

const { slug } = Astro.params;
const filePath = findPostFile(slug);
if (!filePath) {
  return Astro.redirect('/404');
}
const fileContent = fs.readFileSync(filePath, 'utf-8');
const { data, content } = matter(fileContent);

// Process content for desktop
const fileDesktop = await remark()
  .use(remarkParse)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypeRaw)
  .use(rehypeImageDesktop)
  .use(rehypeStringify)
  .process(content);

// Process content for mobile
const fileMobile = await remark()
  .use(remarkParse)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypeRaw)
  .use(rehypeImageMobile)
  .use(rehypeStringify)
  .process(content);

const htmlDesktop = String(fileDesktop);
const htmlMobile = String(fileMobile);
---

<Base>
  <span slot="title">{data.title}</span>
  <div class="flex min-h-screen">
    <main class="w-full flex flex-col items-center justify-start px-4 py-24">
      <div class="w-full max-w-2xl">
        <!-- Back to home -->
        <a href="/" class="inline-flex items-center text-sm text-[#b3a89c] hover:text-[#3a3732] transition-all group mb-6">
          <svg class="w-4 h-4 mr-2 transform group-hover:-translate-x-1 transition-transform" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
          </svg>
          Back to home
        </a>

        <h1 class="text-3xl font-serif font-semibold text-[#3a3732] mb-2">{data.title}</h1>
        {data.description && (
          <p class="text-lg text-[#9c8e82] mb-2 leading-snug">{data.description}</p>
        )}
        <div class="text-sm text-[#c7beb7] mb-10">{data.date}</div>

        <!-- Image style -->
       
       <style>
  @media (min-width: 1024px) {
    figure.image-block {
      width: calc(100% + 20rem);
      position: relative;
      left: 50%;
      transform: translateX(-50%);
      margin: 2rem 0;
    }

    figure.image-block img.fullwidth {
      width: 100%;
      max-width: none;
      object-fit: cover;
      border-radius: 0.75rem;
      display: block;
    }
  }

  @media (max-width: 1023px) {
    figure.image-block {
      width: 100%;
      margin: 1.5rem 0;
    }

    figure.image-block img.fullwidth {
      width: 100%;
      border-radius: 0.75rem;
    }
  }

  figure.image-block figcaption.caption {
    font-size: 0.875rem;
    color: #B3A293;
    text-align: center;
    font-weight: 600;
    line-height: 1.75;
    margin-top: 0.5rem;
  }
</style>



        <!-- Desktop version -->
        <article class="hidden sm:block text-base text-[#3a3a3a] leading-relaxed prose prose-lg max-w-none" set:html={htmlDesktop} />
        
        <!-- Mobile version -->
        <article class="sm:hidden text-base text-[#3a3a3a] leading-relaxed prose prose-lg max-w-none" set:html={htmlMobile} />
      </div>
    </main>
  </div>
</Base> 