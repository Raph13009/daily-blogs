---
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import Base from '../layouts/Base.astro';

const postsDirectory = './posts';
const postFiles = fs.readdirSync(postsDirectory).filter(f => f.endsWith('.md'));
const posts = postFiles.map(filename => {
  const filePath = path.join(postsDirectory, filename);
  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const { data } = matter(fileContent);
  return {
    slug: filename.replace(/\.md$/, ''),
    ...data,
  };
});

const PAGE_SIZE = 10;
---
<Base>
  <span slot="title">Mon Blog Minimal</span>
  <div class="flex min-h-screen">
    <!-- Bio mobile -->
    <section class="md:hidden w-full px-4 pt-8 pb-4">
      <h1 class="text-2xl font-serif font-semibold mb-2">Raphaël is building in public</h1>
      <p class="text-base mb-1">Hey — I'm using this space to document what I work on, explore ideas, and share progress daily.</p>
      <p class="text-sm text-[#b3a89c] mb-1">From AI tools to micro-startups, I like testing things fast, learning in public, and helping others do the same.</p>
      <p class="text-sm text-[#b3a89c]">Currently building experiments, consulting occasionally, and staying curious. This blog is my trace.</p>
    </section>

    <!-- Bio desktop -->
    <section class="hidden md:flex flex-col justify-start items-start pl-32 pr-12 mt-72 mb-12 w-[420px] max-lg:w-1/2">
      <h1 class="text-3xl font-serif font-semibold mb-4">Raphaël is building in public</h1>
      <p class="text-lg mb-2">Hey — I'm using this space to document what I work on, explore ideas, and share progress daily.</p>
      <p class="text-base text-[#b3a89c] mb-2">From AI tools to micro-startups, I like testing things fast, learning in public, and helping others do the same.</p>
      <p class="text-base text-[#b3a89c]">Currently building experiments, consulting occasionally, and staying curious. This blog is my trace.</p>
    </section>

    <!-- Bloc posts -->
    <main class="flex-1 flex items-center justify-center px-8 max-md:px-2 max-md:py-8">
      <div id="posts-block" class="w-full max-w-2xl bg-white rounded-2xl shadow border border-[#ece7e1] px-8 py-12 flex flex-col gap-0 mt-48 mb-12 pb-24 max-md:mt-4 max-md:px-2 max-md:py-6 max-md:mb-24">

        <!-- Pagination info -->
        <div class="flex items-center justify-between mb-6">
          <div id="pagination-controls" class="flex items-center gap-2 text-[#b3a89c] text-sm"></div>
        </div>

        <!-- Liste des posts (remplie dynamiquement) -->
        <ul id="posts-list" class="flex flex-col gap-6"></ul>
      </div>
    </main>
  </div>
  <footer class="w-full text-center text-sm text-gray-400 py-8 mt-16 select-none">Contact: raphaellevy027@gmail.com</footer>

  <!-- Données injectées via attribut HTML safe -->
  <div id="posts-data" data-json={JSON.stringify(posts).replaceAll('"', '&quot;')} hidden></div>

  <!-- Script pagination -->
  <script type="module">
    const raw = document.getElementById("posts-data").dataset.json;
    const posts = JSON.parse(raw.replaceAll('&quot;', '"'));
    const PAGE_SIZE = 10;

    function getPage() {
      const params = new URLSearchParams(window.location.search);
      return Math.max(1, parseInt(params.get('page') || '1', 10));
    }

    function renderPosts() {
      const page = getPage();
      const start = (page - 1) * PAGE_SIZE;
      const end = start + PAGE_SIZE;
      const paginated = posts.slice(start, end);

      const list = document.getElementById('posts-list');
      list.innerHTML = paginated.map(post => `
        <li class="hover:bg-[#f7f3ef] rounded-xl px-4 py-4 transition-all">
          <a href="/blog/${post.slug}" class="block">
            <div class="flex flex-col gap-1">
              <span class="text-xs text-[#b3a89c]">${post.date}</span>
              <span class="text-xl font-serif font-medium text-[#3a3732]">${post.title}</span>
              <span class="text-base text-[#7c7367]">${post.description}</span>
            </div>
          </a>
        </li>
      `).join('');

      const totalPages = Math.ceil(posts.length / PAGE_SIZE);
      const controls = document.getElementById('pagination-controls');
      const prevPage = page > 1 ? `<a href="?page=${page - 1}" class="hover:text-[#3a3732]">&larr;</a>` : `<span class="opacity-30">&larr;</span>`;
      const nextPage = page < totalPages ? `<a href="?page=${page + 1}" class="hover:text-[#3a3732]">&rarr;</a>` : `<span class="opacity-30">&rarr;</span>`;
      controls.innerHTML = `
        ${prevPage}
        <span>${start + 1}–${Math.min(end, posts.length)} of ${posts.length} posts</span>
        ${nextPage}
      `;
    }

    renderPosts();
  </script>
</Base>
